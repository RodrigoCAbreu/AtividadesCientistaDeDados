library(DBI)
library(RMySQL)
library("data.table")
library("dplyr")
con = dbConnect(MySQL(), user = "rodrigo.abreu", password = "123mudar", dbname = "etl_plataformas", host = "104.41.32.26")
qry <- "SELECT
calldate,
TRANSACTION,
documento,
scriptpoint,
node,
dnanavegacao,
durationcallcenter,
COUNT(*)
FROM etl_plataformas.`cdrlogdata_bcp` PARTITION(p202011)
WHERE durationcallcenter > 0 AND scriptpoint = 188  -- AND (calldate BETWEEN '2020-08-31 00:00:00' AND '2020-09-08 23:59:59')
GROUP BY 1,2,3"
base <- dbGetQuery(con, qry)
base <- data.table(base)
base1 <- base
View(base1)
amostra <- sample_n(base1, 300)
write.csv2(amostra, file = 'Amostra_SP188.csv')
qry <- "SELECT
calldate,
TRANSACTION,
documento,
scriptpoint,
node,
dnanavegacao,
durationcallcenter,
COUNT(*)
FROM etl_plataformas.`cdrlogdata_bcp` PARTITION(p202011)
WHERE durationcallcenter > 0 AND scriptpoint = 203  -- AND (calldate BETWEEN '2020-08-31 00:00:00' AND '2020-09-08 23:59:59')
GROUP BY 1,2,3"
base <- dbGetQuery(con, qry)
base <- data.table(base)
base1 <- base
View(base1)
qry <- "SELECT
calldate,
TRANSACTION,
documento,
scriptpoint,
node,
dnanavegacao,
durationcallcenter,
COUNT(*)
FROM etl_plataformas.`cdrlogdata_bcp` PARTITION(p202011)
WHERE durationcallcenter > 0 AND scriptpoint = 203  -- AND (calldate BETWEEN '2020-08-31 00:00:00' AND '2020-09-08 23:59:59')
GROUP BY 1,2,3"
base <- dbGetQuery(con, qry)
base <- data.table(base)
base1 <- base
View(base1)
View(amostra)
View(base1)
amostra <- sample_n(base1, 300)
write.csv2(amostra, file = 'Amostra_SP203.csv')
getwd()
setwd("~/AtividadesCientistaDeDados/Machine Learning/Cap09 - Decision Treee, Random Forest e MÃ©todos Ensemble - II/R")
install.packages(c("Ckmeans.1d.dp", "DiagrammeR", "xgboost"))
require(xgboost)
require(Ckmeans.1d.dp)
require(DiagrammeR)
dados_treino <- data(agaricus.train, package = 'xgboost')
dados_teste <- data(agaricus.test, package = 'xgboost')
str(dados_treino)
dim(dados_treino$data)
dim(dados_teste$data)
data(agaricus.train, package = 'xgboost')
data(agaricus.test, package = 'xgboost')
dados_treino <- agaricus.train
dados_teste <- agaricus.test
str(dados_treino)
dim(dados_treino$data)
dim(dados_teste$data)
View(dados_treino)
View(dados_teste)
class(dados_treino$data)[1]
class(dados_treino$label)
modelo_v1 <- xgboost(data = dados_treino$data,
label = dados_treino$label,
max.depth = 2,
eta = 1,
nthread = 2,
nround = 2,
objective = "binary:logistic")
modelo_v1
dtrain <- xgb.DMatrix(data = dados_treino$data, label = dados_treino$label)
dtrain
class(dtrain)
modelo_v2 <- xgboost(data = dtrain,
max.depth = 2,
eta = 1,
nthread = 2,
nround = 2,
objective = "binary:logistic")
modelo_v2
modelo_v3 <- xgboost(data = dtrain,
max.depth = 2,
eta = 1,
nthread = 2,
nround = 2,
objective = "binary:logistic",
verbose = 2)
modelo_v3
pred <- predict(modelo_v3, dados_teste$data)
print(length(pred))
print(head(pred)
print(head(pred))
print(head(pred))
prediction <- as.numeric(pred > 0.5)
print(head(prediction))
err <- mean(as.numeric(pred > 0.5) != dados_teste$label)
print(paste("test-error = ", err))
dtrain <- xgb.DMatrix(data = dados_treino$data, label = dados_treino$label)
dtest <- xgb.DMatrix(data = dados_teste$data, label = dados_teste$label)
watchlist <- list(train = dtrain, test = dtest)
watchlist
modelo_v4 <- xgb.train(data = dtrain,
max.depth = 2,
eta = 1,
nthread = 2,
nround = 2,
watchlist = watchlist,
objective = "binary:logistic")
label = getinfo(dtest, "label")
pred <- predict(modelo_v4, dtest)
err <- as.numeric(sum(as.integer(pred > 0.5) != label))/length(label)
print(paste("test-error = ", err))
importance_matrix <- xgb.importance(model = modelo_v4)
print(importance_matrix)
xgb.plot.importance(importance_matrix = importance_matrix)
xgb.dump(modelo_v4, with_stats = T)
xgb.plot.tree(model = modelo_v4)
