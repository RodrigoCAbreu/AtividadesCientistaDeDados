library(DBI)
library(RMySQL)
library("data.table")
library("dplyr")
con = dbConnect(MySQL(), user = "rodrigo.abreu", password = "123mudar", dbname = "etl_plataformas", host = "104.41.32.26")
qry <- "SELECT
calldate,
TRANSACTION,
documento,
scriptpoint,
node,
dnanavegacao,
durationcallcenter,
COUNT(*)
FROM etl_plataformas.`cdrlogdata_bcp` PARTITION(p202011)
WHERE durationcallcenter > 0 AND scriptpoint = 188  -- AND (calldate BETWEEN '2020-08-31 00:00:00' AND '2020-09-08 23:59:59')
GROUP BY 1,2,3"
base <- dbGetQuery(con, qry)
base <- data.table(base)
base1 <- base
View(base1)
amostra <- sample_n(base1, 300)
write.csv2(amostra, file = 'Amostra_SP188.csv')
qry <- "SELECT
calldate,
TRANSACTION,
documento,
scriptpoint,
node,
dnanavegacao,
durationcallcenter,
COUNT(*)
FROM etl_plataformas.`cdrlogdata_bcp` PARTITION(p202011)
WHERE durationcallcenter > 0 AND scriptpoint = 203  -- AND (calldate BETWEEN '2020-08-31 00:00:00' AND '2020-09-08 23:59:59')
GROUP BY 1,2,3"
base <- dbGetQuery(con, qry)
base <- data.table(base)
base1 <- base
View(base1)
qry <- "SELECT
calldate,
TRANSACTION,
documento,
scriptpoint,
node,
dnanavegacao,
durationcallcenter,
COUNT(*)
FROM etl_plataformas.`cdrlogdata_bcp` PARTITION(p202011)
WHERE durationcallcenter > 0 AND scriptpoint = 203  -- AND (calldate BETWEEN '2020-08-31 00:00:00' AND '2020-09-08 23:59:59')
GROUP BY 1,2,3"
base <- dbGetQuery(con, qry)
base <- data.table(base)
base1 <- base
View(base1)
View(amostra)
View(base1)
amostra <- sample_n(base1, 300)
write.csv2(amostra, file = 'Amostra_SP203.csv')
getwd()
setwd("~/AtividadesCientistaDeDados/Machine Learning/Cap08 - Decision Treee, Random Forest e MÃ©todos Ensemble - I/R")
install.packages("C50")
credit <- read.csv("dados/credito.csv")
str(credit)
View(credit)
table(credit$checking_balance)
table(credit$savings_balance)
table(credit$savings_balance)
table(credit$checking_balance)
summary(credit$months_loan_duration)
summary(credit$amount)
table(credit$default)
set.seed(123)
train_sample <- sample(1000, 900)
credit_train <- credit[train_sample, ]
credit_test  <- credit[-train_sample, ]
prop.table(table(credit_train$default))
prop.table(table(credit_test$default))
prop.table(table(credit_test$default))
library(C50)
credit_model <- C5.0(credit_train[-17], credit_train$default)
credit_model
credit_model
credit_model <- C5.0(credit_train[-17], credit_train$default)
credit_model
summary(credit_model)
summary(credit_model)
credit_pred <- predict(credit_model, credit_test)
credit_pred
library(gmodels)
CrossTable(credit_test$default,
credit_pred,
prop.chisq = FALSE,
prop.c = FALSE,
prop.r = FALSE,
dnn = c('Observado', 'Previsto'))
credit_boost10 <- C5.0(credit_train[-17], credit_train$default, trials = 10)
credit_boost10
summary(credit_boost10)
credit_boost_pred10 <- predict(credit_boost10, credit_test)
CrossTable(credit_test$default,
credit_boost_pred10,
prop.chisq = FALSE,
prop.c = FALSE,
prop.r = FALSE,
dnn = c('Observado', 'Previsto'))
CrossTable(credit_test$default,
credit_boost_pred10,
prop.chisq = FALSE,
prop.c = FALSE,
prop.r = FALSE,
dnn = c('Observado', 'Previsto'))
matrix_dimensions <- list(c("no", "yes"), c("no", "yes"))
names(matrix_dimensions) <- c("Previsto", "Observado")
matrix_dimensions
matrix_dimensions <- list(c("no", "yes"), c("no", "yes"))
names(matrix_dimensions) <- c("Previsto", "Observado")
matrix_dimensions
error_cost <- matrix(c(0, 1, 4, 0), nrow = 2, dimnames = matrix_dimensions)
error_cost
credit_cost <- C5.0(credit_train[-17], credit_train$default, costs = error_cost)
credit_cost_pred <- predict(credit_cost, credit_test)
CrossTable(credit_test$default,
credit_cost_pred,
prop.chisq = FALSE,
prop.c = FALSE,
prop.r = FALSE,
dnn = c('Observado', 'Previsto'))
